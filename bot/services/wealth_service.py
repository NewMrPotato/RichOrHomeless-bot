# import random
# import datetime
# import json
# from pathlib import Path


# DATA_DIR = Path(__file__).resolve().parents[2] / 'data'
# PHRASES_FILE = DATA_DIR / 'phrases.json'
# EMOJIS_FILE = DATA_DIR / 'emojis.json'


# # –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ñ—Ä–∞–∑ –∏ —ç–º–æ–¥–∑–∏
# with open(PHRASES_FILE, 'r', encoding='utf-8') as f:
#     PHRASES = json.load(f)


# with open(EMOJIS_FILE, 'r', encoding='utf-8') as f:
#     EMOJIS = json.load(f)


# async def generate_capital(tg_id: int) -> float:
#     # –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ-—Å–ª—É—á–∞–π–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, —á—Ç–æ–±—ã –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–Ω–µ –ë–î
#     # —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—ã–ª –ø–æ—Ö–æ–∂, –Ω–æ –º—ã –≤—Å—ë —Ä–∞–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
#     rnd = random.Random()
#     seed = (tg_id << 32) ^ int(datetime.datetime.utcnow().timestamp())
#     rnd.seed(seed)


#     # –ø—Ä–∏–º–µ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞: 0 - 10_000_000
#     val = rnd.random() * 10_000_000
#     # –æ–∫—Ä—É–≥–ª–∏–º –¥–æ —Ü–µ–Ω—Ç–æ–≤
#     return round(val, 2)


# def pick_phrase_and_emoji(capital: float) -> (str, str):
#     # PHRASES ‚Äî —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ {"min":0, "max":100, "phrases": [...], "category": "poor"}
#     # EMOJIS ‚Äî —Å–ª–æ–≤–∞—Ä—å {"poor": ["üíÄ","ü•Ä"], "rich": ["üíé","ü§ë"]}


#     for item in PHRASES:
#         if capital >= item['min'] and capital <= item['max']:
#             phrase = random.choice(item['phrases'])
#             cat = item.get('category', 'neutral')
#             emoji = random.choice(EMOJIS.get(cat, ['üíµ']))
#             return phrase, emoji
#     # fallback
#     return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 'üíµ'

import random
import datetime
import json
from pathlib import Path

DATA_DIR = Path(__file__).resolve().parents[2] / 'data'
PHRASES_FILE = DATA_DIR / 'phrases.json'
EMOJIS_FILE = DATA_DIR / 'emojis.json'

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ñ—Ä–∞–∑ –∏ —ç–º–æ–¥–∑–∏
with open(PHRASES_FILE, 'r', encoding='utf-8') as f:
    PHRASES = json.load(f)

with open(EMOJIS_FILE, 'r', encoding='utf-8') as f:
    EMOJIS = json.load(f)

# –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞
CAPITAL_DISTRIBUTION = [
    {"range": (0, 100), "weight": 0.35},          # –±–µ–¥–Ω–æ—Ç–∞
    {"range": (100, 1000), "weight": 0.30},       # –≤—ã–∂–∏–≤–∞—é—â–∏–µ
    {"range": (1000, 10000), "weight": 0.20},     # —Å—Ä–µ–¥–Ω–∏–π –∫–ª–∞—Å—Å
    {"range": (10000, 100000), "weight": 0.10},   # –±–æ–≥–∞—Ç—ã–µ
    {"range": (100000, 1000000), "weight": 0.04}, # —ç–ª–∏—Ç–∞
    {"range": (1000000, 10000000), "weight": 0.01} # –º–∏–ª–ª–∏–∞—Ä–¥–µ—Ä—ã
]

async def generate_capital(tg_id: int) -> float:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏ –∏ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º seed
    –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏.
    """
    rnd = random.Random()
    seed = (tg_id << 32) ^ int(datetime.datetime.utcnow().timestamp())
    rnd.seed(seed)

    # –í—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    choice = rnd.choices(CAPITAL_DISTRIBUTION, weights=[r["weight"] for r in CAPITAL_DISTRIBUTION])[0]
    low, high = choice["range"]
    return round(rnd.uniform(low, high), 2)

def pick_phrase_and_emoji(capital: float) -> (str, str):
    """
    –í—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ñ—Ä–∞–∑—É –∏ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–ø–∏—Ç–∞–ª–∞.
    PHRASES ‚Äî —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ {"min":0, "max":100, "phrases":[...], "category":"poor"}
    EMOJIS ‚Äî —Å–ª–æ–≤–∞—Ä—å {"poor": ["üíÄ","ü•Ä"], "rich": ["üíé","ü§ë"]}
    """
    for item in PHRASES:
        if item['min'] <= capital <= item['max']:
            phrase = random.choice(item['phrases'])
            cat = item.get('category', 'neutral')
            emoji = random.choice(EMOJIS.get(cat, ['üíµ']))
            return phrase, emoji
    # fallback
    return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 'üíµ'
